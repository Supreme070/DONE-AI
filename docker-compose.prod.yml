version: '3.8'

# Production override for docker-compose.yml
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  postgres:
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-omnisecai_security}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Remove init scripts in production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mongodb:
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-omnisecai_logs}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  valkey:
    restart: always
    command: valkey-server --requirepass ${VALKEY_PASSWORD} --appendonly yes
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    restart: always
    environment:
      NODE_ENV: production
      PORT: 8000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-omnisecai_security}
      DB_USER: ${POSTGRES_USER:-admin}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      MONGO_URL: mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB:-omnisecai_logs}?authSource=admin
      VALKEY_URL: valkey://:${VALKEY_PASSWORD}@valkey:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      API_VERSION: v1
      CORS_ORIGIN: ${CORS_ORIGIN}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@omnisecai.com}
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-100mb}
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900000}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
    volumes:
      # Remove source code mounting for production
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    command: npm start
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_WS_URL: ${VITE_WS_URL}
        VITE_APP_NAME: ${VITE_APP_NAME:-OmnisecAI}
        VITE_APP_VERSION: ${VITE_APP_VERSION:-1.0.0}
        VITE_ENVIRONMENT: production
    restart: always
    environment:
      NODE_ENV: production
    volumes:
      # Remove source code mounting for production
    command: npm run preview -- --host 0.0.0.0 --port 3000
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  monitoring:
    restart: always
    environment:
      PYTHONPATH: /app
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-omnisecai_security}
      DB_USER: ${POSTGRES_USER:-admin}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      MONGO_URL: mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB:-omnisecai_logs}?authSource=admin
      VALKEY_URL: valkey://:${VALKEY_PASSWORD}@valkey:6379
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      # Remove source code mounting for production
      - monitoring_logs:/app/logs
    command: python -m uvicorn src.main:app --host 0.0.0.0 --port 9000
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  nginx:
    restart: always
    profiles: []  # Always include nginx in production
    volumes:
      - ./infrastructure/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

volumes:
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  monitoring_logs:
    driver: local
  nginx_logs:
    driver: local